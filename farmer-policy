import asyncio
import os
import logging
from dotenv import load_dotenv
from google.adk import Agent
from google.adk.runners import InMemoryRunner
from google.adk.sessions import Session
from google.genai import types
import google.cloud.logging
from pydantic import BaseModel, Field

# Load environment variables
load_dotenv()
google_cloud_project = os.getenv("GOOGLE_CLOUD_PROJECT")
google_cloud_location = os.getenv("GOOGLE_CLOUD_LOCATION")
model_name = os.getenv("MODEL", "models/chat-bison@001")

# Setup Cloud Logging
cloud_logging_client = google.cloud.logging.Client()
cloud_logging_client.setup_logging()

# Logger config
logger = logging.getLogger("policy_agent")
logger.setLevel(logging.INFO)

# Known corrections
STATE_CORRECTIONS = {
    "maharastra": "Maharashtra",
    "up": "Uttar Pradesh",
    "mp": "Madhya Pradesh",
    "tamilnadu": "Tamil Nadu",
    "karnatak": "Karnataka",
}

# Output schema
class PolicyResponse(BaseModel):
    info: str = Field(description="Bullet point summary of Indian government schemes for farmers.")

# Main logic
async def main():
    print("üëã Welcome! Let's help you find Indian Government schemes for farmers.\n")

    try:
        # Region input
        all_india = input("Do you want to search for policies applicable to all of India? (yes/no): ").strip().lower()
        query = ""

        if all_india == "yes":
            query = "List 5 important government schemes in India specifically for farmers. Provide short bullet points with name, benefits, and how to apply."
        else:
            state = input("Enter the state you are interested in: ").strip().lower()
            state = STATE_CORRECTIONS.get(state, state.title())
            query = f"List important government schemes in {state} specifically for farmers. Use short bullet points including name, benefits, and how to apply."

        # Keyword input
        particular_scheme = input("Are you looking for a particular scheme? (yes/no): ").strip().lower()
        if particular_scheme == "yes":
            keyword = input("Enter the name or keyword of the scheme: ").strip()
            query = f"Give a brief overview in bullet points of government schemes in {state if all_india != 'yes' else 'India'} related to '{keyword}', only for farmers."

        print(f"\nüîé [DEBUG] Final query sent to agent: {query}\n")
        logger.info(f"[USER QUERY] {query}")

        # Agent with bilingual and farmer-specific prompt
        agent = Agent(
            model=model_name,
            name="policy_agent",
            instruction=(
                "You are a respectful and helpful assistant focused only on helping **farmers** understand government schemes.\n"
                "üëâ If the user asks in **Hindi**, reply in **Hindi**. If they ask in **English**, reply in **English**.\n"
                "‚úÖ Only respond with relevant government schemes for **farmers**.\n"
                "üìù Use **short bullet points**. Each point should include:\n"
                "   - üìå Scheme Name\n"
                "   - üéØ Who it's for (only farmers)\n"
                "   - ‚úÖ Key Benefits\n"
                "   - üìù How to Apply\n"
                "‚ùå Do NOT include schemes for women, youth, electricity, or general welfare unless they are directly for farmers.\n"
                "üôè Be polite, avoid long paragraphs or intros, and if nothing is found, say so kindly."
            ),
            output_schema=PolicyResponse,
            disallow_transfer_to_parent=True,
            disallow_transfer_to_peers=True,
        )

        runner = InMemoryRunner(agent=agent, app_name="policy_app")
        session = await runner.session_service.create_session(app_name="policy_app", user_id="user1")

        content = types.Content(
            role="user",
            parts=[types.Part.from_text(text=query)]
        )

        # Await agent response
        result_text = None
        async for event in runner.run_async(user_id="user1", session_id=session.id, new_message=content):
            if event.content.parts and event.content.parts[0].text:
                result_text = event.content.parts[0].text
                print(f"\nü§ñ {event.author}:\n{result_text}")
                break

        if not result_text:
            logger.warning("Empty response from agent.")
            print("\n‚ö†Ô∏è Sorry, no relevant policy information was found for your query.")
            print("üîÅ Try rephrasing your question or choosing another scheme/state.")

    except Exception as e:
        logger.error(f"Exception occurred: {str(e)}", exc_info=True)
        print("\nüö® An unexpected error occurred while processing your request.")
        print("Please try again later or check your network/credentials.")

    finally:
        cloud_logging_client.close()
        print("‚úÖ Session complete. Logs sent.")

# Entrypoint
if __name__ == "__main__":
    asyncio.run(main())
